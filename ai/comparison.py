from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity

# Load a lightweight sentence embedding model from Hugging Face
# 'all-MiniLM-L6-v2' provides a good balance between speed and semantic accuracy
model = SentenceTransformer("all-MiniLM-L6-v2")


def compare_outlines(actual_outline, ai_outline):
    """
    Compares the actual course outline with the AI-generated outline using
    sentence embeddings and cosine similarity.

    Args:
        actual_outline (str): The actual topics/modules from the course
        ai_outline (str): The outline generated by the AI

    Returns:
        float: Cosine similarity score between 0 and 1
    """

    # Encode both outlines into high-dimensional vector representations
    actual_embedding = model.encode([actual_outline])
    ai_embedding = model.encode([ai_outline])

    # Compute cosine similarity between the two vectors
    similarity = cosine_similarity(actual_embedding, ai_embedding)[0][0]

    # Return the similarity score (1 = identical, 0 = no similarity)
    return similarity


def compare_outlinesKeyWords(actual_outline, ai_outline):
    """
    Compares the actual course outline with the AI-generated outline using
    sentence embeddings and cosine similarity.

    Args:
        actual_outline (str): The actual topics/modules from the course
        ai_outline (str): The outline generated by the AI

    Returns:
        float: Cosine similarity score between 0 and 1
    """

    # Encode both outlines into high-dimensional vector representations
    actual_embedding = model.encode([actual_outline])
    ai_embedding = model.encode([ai_outline])

    # Compute cosine similarity between the two vectors
    similarity = cosine_similarity(actual_embedding, ai_embedding)[0][0]

    # Return the similarity score (1 = identical, 0 = no similarity)
    return similarity
